import{S as ou,i as su,s as ru,e as s,t as n,k as p,c as r,a as l,h as o,d as e,m as h,_ as z,b as d,g as c,F as t,I as oc}from"./vendor-15527e3e.js";function lu(eu){let J,To,En,St,Io,Sn,Rt,sc,Rn,Tt,Go,Tn,It,Oo,In,H,te,Po,No,it,Ao,Lo,Gn,Gt,Do,On,y,ee,m,Bo,ae,Uo,jo,ne,Mo,Co,oe,Fo,Wo,se,xo,Vo,re,zo,Ho,le,Yo,qo,ie,Ko,Xo,Qo,ce,pe,Jo,Zo,he,ct,$o,pt,ts,es,as,ue,ht,ns,de,os,ss,rs,fe,ut,ls,me,is,cs,ps,ge,L,hs,ke,us,ds,ye,fs,ms,ve,gs,ks,Pn,Ot,ys,Nn,Z,we,Y,vs,be,ws,bs,_e,_s,Es,Ss,Ee,Se,Rs,An,Pt,rc,Ln,R,Re,q,Ts,Te,Is,Gs,Ie,Os,Ps,Ns,Ge,D,As,Oe,Ls,Ds,Pe,Bs,Us,Ne,js,Ms,Cs,Ae,M,Fs,Le,Ws,xs,De,Vs,zs,Be,Hs,Ys,Ue,je,qs,Dn,Nt,Ks,Bn,E,Me,Ce,Xs,Qs,Fe,We,Js,Zs,xe,dt,$s,Ve,tr,er,ar,ze,ft,nr,He,or,sr,rr,mt,gt,lr,Ye,ir,cr,pr,kt,qe,hr,ur,Ke,dr,Un,At,lc,jn,K,Xe,Qe,fr,mr,Je,Ze,gr,Mn,Lt,kr,Cn,Dt,B,yr,$e,vr,wr,ta,br,_r,ea,Er,Sr,Fn,Bt,aa,Rr,Wn,U,na,oa,Tr,Ir,sa,ra,Gr,Or,la,ia,Pr,xn,Ut,ic,Vn,X,ca,pa,Nr,Ar,ha,ua,Lr,zn,jt,Dr,Hn,$,Br,yt,Ur,jr,Yn,C,da,vt,Mr,fa,Cr,Fr,Wr,ma,wt,xr,ga,Vr,zr,Hr,ka,b,Yr,ya,qr,Kr,va,Xr,Qr,wa,Jr,Zr,ba,$r,tl,_a,el,al,qn,Mt,cc,Kn,T,Ea,I,nl,Sa,ol,sl,Ra,rl,ll,Ta,il,cl,Ia,pl,hl,ul,Ga,_,dl,Oa,fl,ml,Pa,gl,kl,Na,yl,vl,Aa,wl,bl,La,_l,El,Sl,Da,Q,Rl,Ba,Tl,Il,Ua,Gl,Ol,Pl,ja,u,Nl,Ma,Al,Ll,Ca,Dl,Bl,Fa,Ul,jl,Wa,Ml,Cl,xa,Fl,Wl,Va,xl,Vl,za,zl,Hl,Ha,Yl,ql,Ya,Kl,Xl,qa,Ql,Jl,Xn,Ct,pc,Qn,bt,k,Zl,Ka,$l,ti,Xa,ei,ai,Qa,ni,oi,Ja,si,ri,Za,li,ii,$a,ci,pi,Jn,Ft,j,hi,tn,ui,di,en,fi,mi,an,gi,ki,Zn,Wt,hc,$n,tt,nn,g,yi,on,vi,wi,sn,bi,_i,rn,Ei,Si,ln,Ri,Ti,cn,Ii,Gi,pn,Oi,Pi,hn,Ni,Ai,Li,un,G,Di,dn,Bi,Ui,fn,ji,Mi,mn,Ci,Fi,gn,Wi,xi,to,xt,uc,eo,Vt,O,Vi,kn,zi,Hi,yn,Yi,qi,vn,Ki,Xi,wn,Qi,Ji,ao,zt,dc,no,Ht,Zi,oo,Yt,fc,so,qt,$i,ro,Kt,tc,lo,et,ec,bn,ac,nc,io,_t,au=`<code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>U2D<span class="token punctuation">.</span>Animation</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoveCharacter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">&#123;</span>
	
	<span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> baseSpeed <span class="token operator">=</span> <span class="token number">3.0f</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name">Rigidbody2D</span> rb<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">Animator</span> _anim<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">Transform</span> _walkRight<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">Vector3</span> _faceRightScale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">Vector3</span> _faceLeftScale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		rb <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody2D<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		_anim <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		_walkRight <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"RigRight"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// Get character direction based on player input</span>
		<span class="token class-name">Vector2</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetAxisRaw</span><span class="token punctuation">(</span><span class="token string">"Horizontal"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Input<span class="token punctuation">.</span><span class="token function">GetAxisRaw</span><span class="token punctuation">(</span><span class="token string">"Vertical"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">MoveRig</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MoveRig</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span> dir<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>dir <span class="token operator">==</span> Vector2<span class="token punctuation">.</span>zero<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token comment">// If character not moving, set its Speed parameter to zero</span>
			rb<span class="token punctuation">.</span>velocity <span class="token operator">=</span> Vector2<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>
			_anim<span class="token punctuation">.</span><span class="token function">SetFloat</span><span class="token punctuation">(</span><span class="token string">"Speed"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">// Only set directional animation if there's an input direction</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token class-name"><span class="token keyword">float</span></span> speed <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span>magnitude<span class="token punctuation">,</span><span class="token number">0.0f</span><span class="token punctuation">,</span><span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			dir<span class="token punctuation">.</span><span class="token function">Normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// Give the character's rigidbody component velocity so that it moves</span>
			rb<span class="token punctuation">.</span>velocity <span class="token operator">=</span> baseSpeed <span class="token operator">*</span> speed <span class="token operator">*</span> dir<span class="token punctuation">;</span>

			<span class="token comment">// Set parameters based on character's current speed and direction</span>
			_anim<span class="token punctuation">.</span><span class="token function">SetFloat</span><span class="token punctuation">(</span><span class="token string">"Speed"</span><span class="token punctuation">,</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span>
			_anim<span class="token punctuation">.</span><span class="token function">SetFloat</span><span class="token punctuation">(</span><span class="token string">"Horizontal"</span><span class="token punctuation">,</span>Mathf<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			_anim<span class="token punctuation">.</span><span class="token function">SetFloat</span><span class="token punctuation">(</span><span class="token string">"Vertical"</span><span class="token punctuation">,</span>Mathf<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">Flip</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// If character is moving left, flip it to face left</span>
	<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Flip</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span> dir<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>_walkRight<span class="token punctuation">.</span>localScale <span class="token operator">==</span> _faceRightScale<span class="token punctuation">)</span> _walkRight<span class="token punctuation">.</span>localScale <span class="token operator">=</span> _faceLeftScale<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">else</span>
			<span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>_walkRight<span class="token punctuation">.</span>localScale <span class="token operator">==</span> _faceLeftScale<span class="token punctuation">)</span> _walkRight<span class="token punctuation">.</span>localScale <span class="token operator">=</span> _faceRightScale<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){J=s("p"),To=n("In recent years, Unity has introduced features that allow you to rig and animate a 2d character. You can import a PSD file with separate layers for, say, legs, arms, a head and torso, and then draw bones onto those layers. Unity can then auto-generate meshes that you can later animate by moving around the bones."),En=p(),St=s("p"),Io=n("This post explains how to rig and animate a character in Unity in four (or eight) directions, for a top-down game like this:"),Sn=p(),Rt=s("img"),Rn=p(),Tt=s("p"),Go=n("Most tutorials I have found only explain how to do this for characters that only face to the right or left. When I set out to animate a top-down character in four (or eight) directions, I had to solve a lot of problems, so I am documenting the process here to save you (and future me) some time."),Tn=p(),It=s("p"),Oo=n("This tutorial is mostly about process and organization, and will not get into great detail about rigging or animating characters. There are plenty of great resources out there to learn the tools discussed here."),In=p(),H=s("p"),te=s("strong"),Po=n("A note on requirements:"),No=n(" Other than your character drawings and Unity itself, the only app this tutorial requires is Photoshop, or any other app you can use that exports PSBs, also called Photoshop Large Document files. There is a StackOverflow thread "),it=s("a"),Ao=n("here"),Lo=n(" about converting PSDs to PSBs."),Gn=p(),Gt=s("h2"),Do=n("Setup"),On=p(),y=s("ol"),ee=s("li"),m=s("p"),Bo=n("Install Unity\u2019s "),ae=s("strong"),Uo=n("2D Animation"),jo=n(" and "),ne=s("strong"),Mo=n("PSD Importer"),Co=n(" packages: "),oe=s("strong"),Fo=n("Window"),Wo=n(" > "),se=s("strong"),xo=n("Package Manager"),Vo=n(" > Change top dropdown to "),re=s("strong"),zo=n("Unity Registry"),Ho=n(" > find "),le=s("strong"),Yo=n("2D Animation"),qo=n(" and "),ie=s("strong"),Ko=n("PSD Importer"),Xo=n(", click Install on the bottom right of the window."),Qo=p(),ce=s("li"),pe=s("p"),Jo=n("At minimum, you should draw a character facing up, down and to the right. You can use your right-facing animation for leftward movement by flipping your sprite in your movement script (see the script example below). If you want to have specific animations for diagonal movement, you can also draw your character facing up-right and down-right, and those can also be flipped for leftward movement. Of course, if your character should look different when it faces left than it does when it faces right, you can also draw your character facing left. You can follow this tutorial whether you\u2019ve drawn your character in the minimum three directions, or in all eight possible directions, and anything in between."),Zo=p(),he=s("li"),ct=s("p"),$o=n("Prepare your character by separating each of its moving parts into its own layer. This can include the limbs, head and torso \u2014 anything that might move. I generally draw my characters in Procreate, flatten each moving part to individual layers, name the layers, then export to PSD. The layers in "),pt=s("a"),ts=n("this project"),es=n(" are a good guide for breaking up a character."),as=p(),ue=s("li"),ht=s("p"),ns=n("You will need a separate file for each direction your character faces. You may think it would make more sense to put all directions into one big PSD, but that quickly becomes a nightmare in Unity. Once your separate PSD files are ready, open them in Photoshop and save them as as PSBs, also called "),de=s("strong"),os=n("Photoshop Large Document"),ss=n(" files. Then you can import those PSB files into Unity."),rs=p(),fe=s("li"),ut=s("p"),ls=n("After you have imported the PSB files, select them and look at their settings in the Inspector. Make sure the "),me=s("strong"),is=n("Pixels per Unit"),cs=n(" value is what you want."),ps=p(),ge=s("li"),L=s("p"),hs=n("Give the PSB files names that represent their directions, like "),ke=s("strong"),us=n("RigUp"),ds=n(", "),ye=s("strong"),fs=n("RigDown"),ms=n(" and "),ve=s("strong"),gs=n("RigRight"),ks=n("."),Pn=p(),Ot=s("h2"),ys=n("Rig your character"),Nn=p(),Z=s("ol"),we=s("li"),Y=s("p"),vs=n("Select one of your imported PSB files and click "),be=s("strong"),ws=n("Sprite Editor"),bs=n(" in the Inspector, then in the Sprite Editor window, switch to "),_e=s("strong"),_s=n("Skinning Editor"),Es=n(" in the drop-down on the top left."),Ss=p(),Ee=s("li"),Se=s("p"),Rs=n("Create bones for each layer or body part that will have to move. Play with splitting and editing bones to get them right. Depending on the complexity of your character, limbs can have one, two or three bones. For this tutorial, I will assume you are using two."),An=p(),Pt=s("img"),Ln=p(),R=s("ol"),Re=s("li"),q=s("p"),Ts=n("Go to "),Te=s("strong"),Is=n("Bone Influence"),Gs=n(", open the "),Ie=s("strong"),Os=n("Visibility"),Ps=n(" pane and select each sprite and associate them with the bones you created."),Ns=p(),Ge=s("li"),D=s("p"),As=n("Go to "),Oe=s("strong"),Ls=n("Auto Geometry"),Ds=n(", make sure Weights is deselected, and click "),Pe=s("strong"),Bs=n("Generate for All Visible."),Us=n(" After that, it\u2019s usually a good idea to click the "),Ne=s("strong"),js=n("Sprite Sheet"),Ms=n(" button at the top of the panel to tighten the geometry."),Cs=p(),Ae=s("li"),M=s("p"),Fs=n("Go to "),Le=s("strong"),Ws=n("Auto Weights"),xs=n(", make sure "),De=s("strong"),Vs=n("Associate Bones"),zs=n(" is deselected, and click "),Be=s("strong"),Hs=n("Generate All."),Ys=p(),Ue=s("li"),je=s("p"),qs=n("Repeat these steps for each of your imported PSBs, so that you have one for each direction your character is facing."),Dn=p(),Nt=s("h2"),Ks=n("Bring your character into the Scene, prepare it for animation"),Bn=p(),E=s("ol"),Me=s("li"),Ce=s("p"),Xs=n("Create a new, empty GameObject in the Hierarchy.  Add components: Rigidbody 2D, Circle Collider 2D (I usually size it as a small circle at the character\u2019s feet), and scripts for input and movement."),Qs=p(),Fe=s("li"),We=s("p"),Js=n("Drag each of your PSB objects, one for each direction, into the Hierarchy as children of your new GameObject."),Zs=p(),xe=s("li"),dt=s("p"),$s=n("For each PSB object, add the "),Ve=s("strong"),tr=n("IK Manager 2D"),er=n(" component. This is to help animate legs and arms, since they move in weird and specific ways. If your characters are basic enough that they don\u2019t have elbows or knees (i.e. just one bone for each arm or leg), then you might not need this."),ar=p(),ze=s("li"),ft=s("p"),nr=n("For any limb that does have more than one bone, add an IK Solver, by pressing the "),He=s("strong"),or=n("+"),sr=n(" in the IK Manager. Creating a new Solver will add it to the Hierarchy as a child of your PSB object."),rr=p(),mt=s("li"),gt=s("p"),lr=n("With a new Solver selected, you\u2019ll need to drag an object to the "),Ye=s("strong"),ir=n("Effector"),cr=n(" field in the Inspector. You can think of the Effector as the hand of an arm or the foot of a leg. Your Effector will depend on how you setup the bones for the limb in question."),pr=p(),kt=s("ul"),qe=s("li"),hr=n("If you have a bone for the hand or foot, that bone should be the Effector, and you can drag it into the IK Solver."),ur=p(),Ke=s("li"),dr=n("If you have two bones for the arm or leg, and no bones for the hand or foot, you can add an empty GameObject as a child of the bottom-most bone in the limb, position it over what would be the hand or foot of that limb, and use that as the Effector by dragging it into the Solver."),Un=p(),At=s("img"),jn=p(),K=s("ol"),Xe=s("li"),Qe=s("p"),fr=n("Once you have set an Effector in the Solver, click \u201CCreate Target.\u201D If it looks weird, select Flip."),mr=p(),Je=s("li"),Ze=s("p"),gr=n("Repeat steps 4, 5 and 6 for each limb that has more than one bone."),Mn=p(),Lt=s("h2"),kr=n("Animate your character"),Cn=p(),Dt=s("ol"),B=s("li"),yr=n("Select the parent GameObject that holds your PSBs, then go to the Animation pane and click Create. That will attach an Animator to the parent GameObject and create a new animation (an "),$e=s("code"),vr=n(".anim"),wr=n(" file, like "),ta=s("code"),br=n("WalkRight.anim"),_r=n(", "),ea=s("code"),Er=n("WalkUp.anim"),Sr=n(", etc). It will also create an Animator Controller with the same name as your parent GameObject. The Animator Controller can be opened in the Animator panel, which is where you can create a state machine that defines your character\u2019s movements. More on that later."),Fn=p(),Bt=s("blockquote"),aa=s("p"),Rr=n("Note: For top-down characters, it\u2019s important to keep all animations attached to the parent GameObject. For side-scrolling characters that only face left and right, it is OK to associate animations with the PSB object itself."),Wn=p(),U=s("ol"),na=s("li"),oa=s("p"),Tr=n("In the Animation pane, the animation you just created should be ready to go. Arrange panes so you can see the Scene and the Animation pane together. In the Scene view, you should see your character, with the bones you created for it, shown in white. If you don\u2019t see them, check your Gizmo Visibility settings. You can click the bones and move them around to create animations."),Ir=p(),sa=s("li"),ra=s("p"),Gr=n("But first, a little more setup is required. Right now, your character probably looks pretty crazy in the Scene, facing all directions at once. When we animate the character, we only want to see one of its directions at a time. That means we will want to hide the directions we are not animating. To do that, in the Animation pane, select Add Property, then find the sprites under the parent sprites that you want to hide, and select the Is Active property."),Or=p(),la=s("li"),ia=s("p"),Pr=n("Once the property is added to the animation, uncheck the box. It will look like nothing happened unless you actually click into the animation onto the keyframe that was created. Remember you have to have a keyframe that unchecks Is Active at the beginning AND end of the animation."),xn=p(),Ut=s("img"),Vn=p(),X=s("ol"),ca=s("li"),pa=s("p"),Nr=n("Now you can start animating your character. If you don\u2019t know how Unity\u2019s Animation tool works, that\u2019s something you should look up elsewhere. But here are the basics: Put the slider at 0:00, press the record button and start animating. Make one pose for each frame, and spread out the frames over the timeline. Mess around until your character looks like its doing something over the course of the frames, like walking or running. When you\u2019re finished, don\u2019t forget to turn off the record button."),Ar=p(),ha=s("li"),ua=s("p"),Lr=n("For this tutorial, it would be best to create idling and walking animations for each of the three directions: up, down and right. Going forward, I\u2019ll assume you have six animations ready: IdleUp, IdleDown, IdleRight, WalkUp, WalkDown and WalkRight. (Remember, for now, you don\u2019t need to make an animation for the left-direction, because the right-direction can be flipped)."),zn=p(),jt=s("h2"),Dr=n("An Animator state machine for a top-down character"),Hn=p(),$=s("p"),Br=n("In this section we will setup a state machine to determine which animation should play based parameters that are set by the player\u2019s input. Some of the steps below are adapted from "),yt=s("a"),Ur=n("this helpful tutorial"),jr=n("."),Yn=p(),C=s("ol"),da=s("li"),vt=s("p"),Mr=n("Open the "),fa=s("strong"),Cr=n("Animator"),Fr=n(" pane. (You should see the animations you have created within the pane.)"),Wr=p(),ma=s("li"),wt=s("p"),xr=n("Click on the "),ga=s("strong"),Vr=n("Parameters"),zr=n(" tab at the top left of the pane."),Hr=p(),ka=s("li"),b=s("p"),Yr=n("Add three new float parameters by selecting "),ya=s("strong"),qr=n("+"),Kr=n(" > "),va=s("strong"),Xr=n("Float"),Qr=n(". Name the parameters "),wa=s("strong"),Jr=n("Horizontal"),Zr=n(", "),ba=s("strong"),$r=n("Vertical"),tl=n(" and "),_a=s("strong"),el=n("Speed"),al=n(". These parameters can be controlled by your character\u2019s movement script, and we will use them here to set conditional animations based on player input."),qn=p(),Mt=s("img"),Kn=p(),T=s("ol"),Ea=s("li"),I=s("p"),nl=n("Right-click anywhere on the right side of the pane and select "),Sa=s("strong"),ol=n("Create State"),sl=n(" > "),Ra=s("strong"),rl=n("From New Blend Tree"),ll=n(". Click into the new Blend Tree, so that at the top of the pane, you see "),Ta=s("strong"),il=n("Base Layer"),cl=n(" > "),Ia=s("strong"),pl=n("Blend Tree"),hl=n("."),ul=p(),Ga=s("li"),_=s("p"),dl=n("Select the Blend Tree node, and in the Inspector, change the "),Oa=s("strong"),fl=n("Blend Type"),ml=n(" to "),Pa=s("strong"),gl=n("2D Simple Directional"),kl=n(". Set the "),Na=s("strong"),yl=n("Parameters"),vl=n(" below the drop-down to "),Aa=s("strong"),wl=n("Horizontal"),bl=n(" and "),La=s("strong"),_l=n("Vertical"),El=n("."),Sl=p(),Da=s("li"),Q=s("p"),Rl=n("Add eight sub-Blend Trees to this Blend Tree by selecting "),Ba=s("strong"),Tl=n("+"),Il=n(" > "),Ua=s("strong"),Gl=n("New Blend Tree"),Ol=n(". Each sub-Blend Tree will represent the eight possible directions in which your character can move based on player input. Even if you are only animating your character in four directions, you will still need to account for diagonal input and movement."),Pl=p(),ja=s("li"),u=s("p"),Nl=n("Name your eight directions: "),Ma=s("strong"),Al=n("Down"),Ll=n(", "),Ca=s("strong"),Dl=n("Up"),Bl=n(", "),Fa=s("strong"),Ul=n("Right"),jl=n(", "),Wa=s("strong"),Ml=n("Left"),Cl=n(", "),xa=s("strong"),Fl=n("RightDown"),Wl=n(", "),Va=s("strong"),xl=n("LeftDown"),Vl=n(", "),za=s("strong"),zl=n("RightUp"),Hl=n(", "),Ha=s("strong"),Yl=n("LeftUp"),ql=n(". Enter values for "),Ya=s("strong"),Kl=n("PosX"),Xl=n(" (Horizontal parameter) and "),qa=s("strong"),Ql=n("PosY"),Jl=n(" (Vertical parameter), as shown below. You should understand that the values represent directions. If the horizontal axis (x) is -1 and the vertical axis (y) is also -1, that is a left and downward movement, etc. Once you have entered all the values this is what you should see in the Inspector:"),Xn=p(),Ct=s("img"),Qn=p(),bt=s("ol"),k=s("li"),Zl=n("In each of your directional sub-Blend Trees, go to the Inspector and set the "),Ka=s("strong"),$l=n("Blend Type"),ti=n(" to "),Xa=s("strong"),ei=n("1D"),ai=n(", and set the "),Qa=s("strong"),ni=n("Parameter"),oi=n(" to "),Ja=s("strong"),si=n("Speed"),ri=n(". Add two motion fields by selecting "),Za=s("strong"),li=n("+"),ii=n(" > "),$a=s("strong"),ci=n("Add Motion Field"),pi=n(". For each direction, select an idle animation and a walk animation."),Jn=p(),Ft=s("ul"),j=s("li"),hi=n("For example, for the Down direction, in the first motion field select the IdleDown animation and set its "),tn=s("strong"),ui=n("Threshold"),di=n(" to "),en=s("strong"),fi=n("0"),mi=n(", then for the second motion field, select the WalkDown animation and set its "),an=s("strong"),gi=n("Threshold to "),ki=n("0.0001**."),Zn=p(),Wt=s("img"),$n=p(),tt=s("ul"),nn=s("li"),g=s("p"),yi=n("What this means is that when the character\u2019s "),on=s("strong"),vi=n("Speed"),wi=n(" is "),sn=s("strong"),bi=n("0"),_i=n(" it should use the IdleDown animation, and when its "),rn=s("strong"),Ei=n("Speed"),Si=n(" is greater than "),ln=s("strong"),Ri=n("0.0001"),Ti=n(", which is really any movement at all, it use the WalkUp animation. The "),cn=s("strong"),Ii=n("Speed"),Gi=n(" parameter, as well as the "),pn=s("strong"),Oi=n("Horizontal"),Pi=n(" and "),hn=s("strong"),Ni=n("Vertical"),Ai=n(" parameters, will be set in your character\u2019s movement script."),Li=p(),un=s("li"),G=s("p"),Di=n("For the Up direction, in the first motion field select the IdleUp animation and set its "),dn=s("strong"),Bi=n("Threshold"),Ui=n(" to "),fn=s("strong"),ji=n("0"),Mi=n(", then for the second motion field, select the WalkUp animation and set its "),mn=s("strong"),Ci=n("Threshold"),Fi=n(" to "),gn=s("strong"),Wi=n("0.0001"),xi=n("."),to=p(),xt=s("img"),eo=p(),Vt=s("ul"),O=s("li"),Vi=n("Since we will flip our right-facing animation when the player moves the character to the left, we will set the same motion fields for all of the remaining directions: Right, Left, RightDown, LeftDown, RightUp and LeftUp. For each of those, in the first motion field, select the IdleRight animation and set its "),kn=s("strong"),zi=n("Threshold"),Hi=n(" to "),yn=s("strong"),Yi=n("0"),qi=n(", then for the second motion field, select the WalkRight animation and set its "),vn=s("strong"),Ki=n("Threshold"),Xi=n(" to "),wn=s("strong"),Qi=n("0.0001"),Ji=n("."),ao=p(),zt=s("img"),no=p(),Ht=s("p"),Zi=n("When all of this is finished, your Blend Tree should look something like this:"),oo=p(),Yt=s("img"),so=p(),qt=s("h2"),$i=n("A basic movement script"),ro=p(),Kt=s("p"),tc=n("Now that you have your character rigged and animated, and parameters setup in the Animator to conditionally play those animations based on player input, you\u2019ll need to create a movement script that sets those parameters and moves your character around the screen."),lo=p(),et=s("p"),ec=n("The script below should do all of that. Attach this script to the parent GameObject that holds your PSB objects, and remember to name your right-facing PSB object "),bn=s("strong"),ac=n("RigRight"),nc=n(", or this won\u2019t work."),io=p(),_t=s("pre"),this.h()},l(a){J=r(a,"P",{});var i=l(J);To=o(i,"In recent years, Unity has introduced features that allow you to rig and animate a 2d character. You can import a PSD file with separate layers for, say, legs, arms, a head and torso, and then draw bones onto those layers. Unity can then auto-generate meshes that you can later animate by moving around the bones."),i.forEach(e),En=h(a),St=r(a,"P",{});var mc=l(St);Io=o(mc,"This post explains how to rig and animate a character in Unity in four (or eight) directions, for a top-down game like this:"),mc.forEach(e),Sn=h(a),Rt=r(a,"IMG",{src:!0}),Rn=h(a),Tt=r(a,"P",{});var gc=l(Tt);Go=o(gc,"Most tutorials I have found only explain how to do this for characters that only face to the right or left. When I set out to animate a top-down character in four (or eight) directions, I had to solve a lot of problems, so I am documenting the process here to save you (and future me) some time."),gc.forEach(e),Tn=h(a),It=r(a,"P",{});var kc=l(It);Oo=o(kc,"This tutorial is mostly about process and organization, and will not get into great detail about rigging or animating characters. There are plenty of great resources out there to learn the tools discussed here."),kc.forEach(e),In=h(a),H=r(a,"P",{});var _n=l(H);te=r(_n,"STRONG",{});var yc=l(te);Po=o(yc,"A note on requirements:"),yc.forEach(e),No=o(_n," Other than your character drawings and Unity itself, the only app this tutorial requires is Photoshop, or any other app you can use that exports PSBs, also called Photoshop Large Document files. There is a StackOverflow thread "),it=r(_n,"A",{href:!0,rel:!0});var vc=l(it);Ao=o(vc,"here"),vc.forEach(e),Lo=o(_n," about converting PSDs to PSBs."),_n.forEach(e),Gn=h(a),Gt=r(a,"H2",{});var wc=l(Gt);Do=o(wc,"Setup"),wc.forEach(e),On=h(a),y=r(a,"OL",{});var P=l(y);ee=r(P,"LI",{});var bc=l(ee);m=r(bc,"P",{});var v=l(m);Bo=o(v,"Install Unity\u2019s "),ae=r(v,"STRONG",{});var _c=l(ae);Uo=o(_c,"2D Animation"),_c.forEach(e),jo=o(v," and "),ne=r(v,"STRONG",{});var Ec=l(ne);Mo=o(Ec,"PSD Importer"),Ec.forEach(e),Co=o(v," packages: "),oe=r(v,"STRONG",{});var Sc=l(oe);Fo=o(Sc,"Window"),Sc.forEach(e),Wo=o(v," > "),se=r(v,"STRONG",{});var Rc=l(se);xo=o(Rc,"Package Manager"),Rc.forEach(e),Vo=o(v," > Change top dropdown to "),re=r(v,"STRONG",{});var Tc=l(re);zo=o(Tc,"Unity Registry"),Tc.forEach(e),Ho=o(v," > find "),le=r(v,"STRONG",{});var Ic=l(le);Yo=o(Ic,"2D Animation"),Ic.forEach(e),qo=o(v," and "),ie=r(v,"STRONG",{});var Gc=l(ie);Ko=o(Gc,"PSD Importer"),Gc.forEach(e),Xo=o(v,", click Install on the bottom right of the window."),v.forEach(e),bc.forEach(e),Qo=h(P),ce=r(P,"LI",{});var Oc=l(ce);pe=r(Oc,"P",{});var Pc=l(pe);Jo=o(Pc,"At minimum, you should draw a character facing up, down and to the right. You can use your right-facing animation for leftward movement by flipping your sprite in your movement script (see the script example below). If you want to have specific animations for diagonal movement, you can also draw your character facing up-right and down-right, and those can also be flipped for leftward movement. Of course, if your character should look different when it faces left than it does when it faces right, you can also draw your character facing left. You can follow this tutorial whether you\u2019ve drawn your character in the minimum three directions, or in all eight possible directions, and anything in between."),Pc.forEach(e),Oc.forEach(e),Zo=h(P),he=r(P,"LI",{});var Nc=l(he);ct=r(Nc,"P",{});var co=l(ct);$o=o(co,"Prepare your character by separating each of its moving parts into its own layer. This can include the limbs, head and torso \u2014 anything that might move. I generally draw my characters in Procreate, flatten each moving part to individual layers, name the layers, then export to PSD. The layers in "),pt=r(co,"A",{href:!0,rel:!0});var Ac=l(pt);ts=o(Ac,"this project"),Ac.forEach(e),es=o(co," are a good guide for breaking up a character."),co.forEach(e),Nc.forEach(e),as=h(P),ue=r(P,"LI",{});var Lc=l(ue);ht=r(Lc,"P",{});var po=l(ht);ns=o(po,"You will need a separate file for each direction your character faces. You may think it would make more sense to put all directions into one big PSD, but that quickly becomes a nightmare in Unity. Once your separate PSD files are ready, open them in Photoshop and save them as as PSBs, also called "),de=r(po,"STRONG",{});var Dc=l(de);os=o(Dc,"Photoshop Large Document"),Dc.forEach(e),ss=o(po," files. Then you can import those PSB files into Unity."),po.forEach(e),Lc.forEach(e),rs=h(P),fe=r(P,"LI",{});var Bc=l(fe);ut=r(Bc,"P",{});var ho=l(ut);ls=o(ho,"After you have imported the PSB files, select them and look at their settings in the Inspector. Make sure the "),me=r(ho,"STRONG",{});var Uc=l(me);is=o(Uc,"Pixels per Unit"),Uc.forEach(e),cs=o(ho," value is what you want."),ho.forEach(e),Bc.forEach(e),ps=h(P),ge=r(P,"LI",{});var jc=l(ge);L=r(jc,"P",{});var at=l(L);hs=o(at,"Give the PSB files names that represent their directions, like "),ke=r(at,"STRONG",{});var Mc=l(ke);us=o(Mc,"RigUp"),Mc.forEach(e),ds=o(at,", "),ye=r(at,"STRONG",{});var Cc=l(ye);fs=o(Cc,"RigDown"),Cc.forEach(e),ms=o(at," and "),ve=r(at,"STRONG",{});var Fc=l(ve);gs=o(Fc,"RigRight"),Fc.forEach(e),ks=o(at,"."),at.forEach(e),jc.forEach(e),P.forEach(e),Pn=h(a),Ot=r(a,"H2",{});var Wc=l(Ot);ys=o(Wc,"Rig your character"),Wc.forEach(e),Nn=h(a),Z=r(a,"OL",{});var uo=l(Z);we=r(uo,"LI",{});var xc=l(we);Y=r(xc,"P",{});var Xt=l(Y);vs=o(Xt,"Select one of your imported PSB files and click "),be=r(Xt,"STRONG",{});var Vc=l(be);ws=o(Vc,"Sprite Editor"),Vc.forEach(e),bs=o(Xt," in the Inspector, then in the Sprite Editor window, switch to "),_e=r(Xt,"STRONG",{});var zc=l(_e);_s=o(zc,"Skinning Editor"),zc.forEach(e),Es=o(Xt," in the drop-down on the top left."),Xt.forEach(e),xc.forEach(e),Ss=h(uo),Ee=r(uo,"LI",{});var Hc=l(Ee);Se=r(Hc,"P",{});var Yc=l(Se);Rs=o(Yc,"Create bones for each layer or body part that will have to move. Play with splitting and editing bones to get them right. Depending on the complexity of your character, limbs can have one, two or three bones. For this tutorial, I will assume you are using two."),Yc.forEach(e),Hc.forEach(e),uo.forEach(e),An=h(a),Pt=r(a,"IMG",{src:!0}),Ln=h(a),R=r(a,"OL",{start:!0});var nt=l(R);Re=r(nt,"LI",{});var qc=l(Re);q=r(qc,"P",{});var Qt=l(q);Ts=o(Qt,"Go to "),Te=r(Qt,"STRONG",{});var Kc=l(Te);Is=o(Kc,"Bone Influence"),Kc.forEach(e),Gs=o(Qt,", open the "),Ie=r(Qt,"STRONG",{});var Xc=l(Ie);Os=o(Xc,"Visibility"),Xc.forEach(e),Ps=o(Qt," pane and select each sprite and associate them with the bones you created."),Qt.forEach(e),qc.forEach(e),Ns=h(nt),Ge=r(nt,"LI",{});var Qc=l(Ge);D=r(Qc,"P",{});var ot=l(D);As=o(ot,"Go to "),Oe=r(ot,"STRONG",{});var Jc=l(Oe);Ls=o(Jc,"Auto Geometry"),Jc.forEach(e),Ds=o(ot,", make sure Weights is deselected, and click "),Pe=r(ot,"STRONG",{});var Zc=l(Pe);Bs=o(Zc,"Generate for All Visible."),Zc.forEach(e),Us=o(ot," After that, it\u2019s usually a good idea to click the "),Ne=r(ot,"STRONG",{});var $c=l(Ne);js=o($c,"Sprite Sheet"),$c.forEach(e),Ms=o(ot," button at the top of the panel to tighten the geometry."),ot.forEach(e),Qc.forEach(e),Cs=h(nt),Ae=r(nt,"LI",{});var tp=l(Ae);M=r(tp,"P",{});var Et=l(M);Fs=o(Et,"Go to "),Le=r(Et,"STRONG",{});var ep=l(Le);Ws=o(ep,"Auto Weights"),ep.forEach(e),xs=o(Et,", make sure "),De=r(Et,"STRONG",{});var ap=l(De);Vs=o(ap,"Associate Bones"),ap.forEach(e),zs=o(Et," is deselected, and click "),Be=r(Et,"STRONG",{});var np=l(Be);Hs=o(np,"Generate All."),np.forEach(e),Et.forEach(e),tp.forEach(e),Ys=h(nt),Ue=r(nt,"LI",{});var op=l(Ue);je=r(op,"P",{});var sp=l(je);qs=o(sp,"Repeat these steps for each of your imported PSBs, so that you have one for each direction your character is facing."),sp.forEach(e),op.forEach(e),nt.forEach(e),Dn=h(a),Nt=r(a,"H2",{});var rp=l(Nt);Ks=o(rp,"Bring your character into the Scene, prepare it for animation"),rp.forEach(e),Bn=h(a),E=r(a,"OL",{});var F=l(E);Me=r(F,"LI",{});var lp=l(Me);Ce=r(lp,"P",{});var ip=l(Ce);Xs=o(ip,"Create a new, empty GameObject in the Hierarchy.  Add components: Rigidbody 2D, Circle Collider 2D (I usually size it as a small circle at the character\u2019s feet), and scripts for input and movement."),ip.forEach(e),lp.forEach(e),Qs=h(F),Fe=r(F,"LI",{});var cp=l(Fe);We=r(cp,"P",{});var pp=l(We);Js=o(pp,"Drag each of your PSB objects, one for each direction, into the Hierarchy as children of your new GameObject."),pp.forEach(e),cp.forEach(e),Zs=h(F),xe=r(F,"LI",{});var hp=l(xe);dt=r(hp,"P",{});var fo=l(dt);$s=o(fo,"For each PSB object, add the "),Ve=r(fo,"STRONG",{});var up=l(Ve);tr=o(up,"IK Manager 2D"),up.forEach(e),er=o(fo," component. This is to help animate legs and arms, since they move in weird and specific ways. If your characters are basic enough that they don\u2019t have elbows or knees (i.e. just one bone for each arm or leg), then you might not need this."),fo.forEach(e),hp.forEach(e),ar=h(F),ze=r(F,"LI",{});var dp=l(ze);ft=r(dp,"P",{});var mo=l(ft);nr=o(mo,"For any limb that does have more than one bone, add an IK Solver, by pressing the "),He=r(mo,"STRONG",{});var fp=l(He);or=o(fp,"+"),fp.forEach(e),sr=o(mo," in the IK Manager. Creating a new Solver will add it to the Hierarchy as a child of your PSB object."),mo.forEach(e),dp.forEach(e),rr=h(F),mt=r(F,"LI",{});var go=l(mt);gt=r(go,"P",{});var ko=l(gt);lr=o(ko,"With a new Solver selected, you\u2019ll need to drag an object to the "),Ye=r(ko,"STRONG",{});var mp=l(Ye);ir=o(mp,"Effector"),mp.forEach(e),cr=o(ko," field in the Inspector. You can think of the Effector as the hand of an arm or the foot of a leg. Your Effector will depend on how you setup the bones for the limb in question."),ko.forEach(e),pr=h(go),kt=r(go,"UL",{});var yo=l(kt);qe=r(yo,"LI",{});var gp=l(qe);hr=o(gp,"If you have a bone for the hand or foot, that bone should be the Effector, and you can drag it into the IK Solver."),gp.forEach(e),ur=h(yo),Ke=r(yo,"LI",{});var kp=l(Ke);dr=o(kp,"If you have two bones for the arm or leg, and no bones for the hand or foot, you can add an empty GameObject as a child of the bottom-most bone in the limb, position it over what would be the hand or foot of that limb, and use that as the Effector by dragging it into the Solver."),kp.forEach(e),yo.forEach(e),go.forEach(e),F.forEach(e),Un=h(a),At=r(a,"IMG",{src:!0}),jn=h(a),K=r(a,"OL",{start:!0});var vo=l(K);Xe=r(vo,"LI",{});var yp=l(Xe);Qe=r(yp,"P",{});var vp=l(Qe);fr=o(vp,"Once you have set an Effector in the Solver, click \u201CCreate Target.\u201D If it looks weird, select Flip."),vp.forEach(e),yp.forEach(e),mr=h(vo),Je=r(vo,"LI",{});var wp=l(Je);Ze=r(wp,"P",{});var bp=l(Ze);gr=o(bp,"Repeat steps 4, 5 and 6 for each limb that has more than one bone."),bp.forEach(e),wp.forEach(e),vo.forEach(e),Mn=h(a),Lt=r(a,"H2",{});var _p=l(Lt);kr=o(_p,"Animate your character"),_p.forEach(e),Cn=h(a),Dt=r(a,"OL",{});var Ep=l(Dt);B=r(Ep,"LI",{});var st=l(B);yr=o(st,"Select the parent GameObject that holds your PSBs, then go to the Animation pane and click Create. That will attach an Animator to the parent GameObject and create a new animation (an "),$e=r(st,"CODE",{});var Sp=l($e);vr=o(Sp,".anim"),Sp.forEach(e),wr=o(st," file, like "),ta=r(st,"CODE",{});var Rp=l(ta);br=o(Rp,"WalkRight.anim"),Rp.forEach(e),_r=o(st,", "),ea=r(st,"CODE",{});var Tp=l(ea);Er=o(Tp,"WalkUp.anim"),Tp.forEach(e),Sr=o(st,", etc). It will also create an Animator Controller with the same name as your parent GameObject. The Animator Controller can be opened in the Animator panel, which is where you can create a state machine that defines your character\u2019s movements. More on that later."),st.forEach(e),Ep.forEach(e),Fn=h(a),Bt=r(a,"BLOCKQUOTE",{});var Ip=l(Bt);aa=r(Ip,"P",{});var Gp=l(aa);Rr=o(Gp,"Note: For top-down characters, it\u2019s important to keep all animations attached to the parent GameObject. For side-scrolling characters that only face left and right, it is OK to associate animations with the PSB object itself."),Gp.forEach(e),Ip.forEach(e),Wn=h(a),U=r(a,"OL",{start:!0});var Jt=l(U);na=r(Jt,"LI",{});var Op=l(na);oa=r(Op,"P",{});var Pp=l(oa);Tr=o(Pp,"In the Animation pane, the animation you just created should be ready to go. Arrange panes so you can see the Scene and the Animation pane together. In the Scene view, you should see your character, with the bones you created for it, shown in white. If you don\u2019t see them, check your Gizmo Visibility settings. You can click the bones and move them around to create animations."),Pp.forEach(e),Op.forEach(e),Ir=h(Jt),sa=r(Jt,"LI",{});var Np=l(sa);ra=r(Np,"P",{});var Ap=l(ra);Gr=o(Ap,"But first, a little more setup is required. Right now, your character probably looks pretty crazy in the Scene, facing all directions at once. When we animate the character, we only want to see one of its directions at a time. That means we will want to hide the directions we are not animating. To do that, in the Animation pane, select Add Property, then find the sprites under the parent sprites that you want to hide, and select the Is Active property."),Ap.forEach(e),Np.forEach(e),Or=h(Jt),la=r(Jt,"LI",{});var Lp=l(la);ia=r(Lp,"P",{});var Dp=l(ia);Pr=o(Dp,"Once the property is added to the animation, uncheck the box. It will look like nothing happened unless you actually click into the animation onto the keyframe that was created. Remember you have to have a keyframe that unchecks Is Active at the beginning AND end of the animation."),Dp.forEach(e),Lp.forEach(e),Jt.forEach(e),xn=h(a),Ut=r(a,"IMG",{src:!0}),Vn=h(a),X=r(a,"OL",{start:!0});var wo=l(X);ca=r(wo,"LI",{});var Bp=l(ca);pa=r(Bp,"P",{});var Up=l(pa);Nr=o(Up,"Now you can start animating your character. If you don\u2019t know how Unity\u2019s Animation tool works, that\u2019s something you should look up elsewhere. But here are the basics: Put the slider at 0:00, press the record button and start animating. Make one pose for each frame, and spread out the frames over the timeline. Mess around until your character looks like its doing something over the course of the frames, like walking or running. When you\u2019re finished, don\u2019t forget to turn off the record button."),Up.forEach(e),Bp.forEach(e),Ar=h(wo),ha=r(wo,"LI",{});var jp=l(ha);ua=r(jp,"P",{});var Mp=l(ua);Lr=o(Mp,"For this tutorial, it would be best to create idling and walking animations for each of the three directions: up, down and right. Going forward, I\u2019ll assume you have six animations ready: IdleUp, IdleDown, IdleRight, WalkUp, WalkDown and WalkRight. (Remember, for now, you don\u2019t need to make an animation for the left-direction, because the right-direction can be flipped)."),Mp.forEach(e),jp.forEach(e),wo.forEach(e),zn=h(a),jt=r(a,"H2",{});var Cp=l(jt);Dr=o(Cp,"An Animator state machine for a top-down character"),Cp.forEach(e),Hn=h(a),$=r(a,"P",{});var bo=l($);Br=o(bo,"In this section we will setup a state machine to determine which animation should play based parameters that are set by the player\u2019s input. Some of the steps below are adapted from "),yt=r(bo,"A",{href:!0,rel:!0});var Fp=l(yt);Ur=o(Fp,"this helpful tutorial"),Fp.forEach(e),jr=o(bo,"."),bo.forEach(e),Yn=h(a),C=r(a,"OL",{});var Zt=l(C);da=r(Zt,"LI",{});var Wp=l(da);vt=r(Wp,"P",{});var _o=l(vt);Mr=o(_o,"Open the "),fa=r(_o,"STRONG",{});var xp=l(fa);Cr=o(xp,"Animator"),xp.forEach(e),Fr=o(_o," pane. (You should see the animations you have created within the pane.)"),_o.forEach(e),Wp.forEach(e),Wr=h(Zt),ma=r(Zt,"LI",{});var Vp=l(ma);wt=r(Vp,"P",{});var Eo=l(wt);xr=o(Eo,"Click on the "),ga=r(Eo,"STRONG",{});var zp=l(ga);Vr=o(zp,"Parameters"),zp.forEach(e),zr=o(Eo," tab at the top left of the pane."),Eo.forEach(e),Vp.forEach(e),Hr=h(Zt),ka=r(Zt,"LI",{});var Hp=l(ka);b=r(Hp,"P",{});var N=l(b);Yr=o(N,"Add three new float parameters by selecting "),ya=r(N,"STRONG",{});var Yp=l(ya);qr=o(Yp,"+"),Yp.forEach(e),Kr=o(N," > "),va=r(N,"STRONG",{});var qp=l(va);Xr=o(qp,"Float"),qp.forEach(e),Qr=o(N,". Name the parameters "),wa=r(N,"STRONG",{});var Kp=l(wa);Jr=o(Kp,"Horizontal"),Kp.forEach(e),Zr=o(N,", "),ba=r(N,"STRONG",{});var Xp=l(ba);$r=o(Xp,"Vertical"),Xp.forEach(e),tl=o(N," and "),_a=r(N,"STRONG",{});var Qp=l(_a);el=o(Qp,"Speed"),Qp.forEach(e),al=o(N,". These parameters can be controlled by your character\u2019s movement script, and we will use them here to set conditional animations based on player input."),N.forEach(e),Hp.forEach(e),Zt.forEach(e),qn=h(a),Mt=r(a,"IMG",{src:!0}),Kn=h(a),T=r(a,"OL",{start:!0});var rt=l(T);Ea=r(rt,"LI",{});var Jp=l(Ea);I=r(Jp,"P",{});var W=l(I);nl=o(W,"Right-click anywhere on the right side of the pane and select "),Sa=r(W,"STRONG",{});var Zp=l(Sa);ol=o(Zp,"Create State"),Zp.forEach(e),sl=o(W," > "),Ra=r(W,"STRONG",{});var $p=l(Ra);rl=o($p,"From New Blend Tree"),$p.forEach(e),ll=o(W,". Click into the new Blend Tree, so that at the top of the pane, you see "),Ta=r(W,"STRONG",{});var th=l(Ta);il=o(th,"Base Layer"),th.forEach(e),cl=o(W," > "),Ia=r(W,"STRONG",{});var eh=l(Ia);pl=o(eh,"Blend Tree"),eh.forEach(e),hl=o(W,"."),W.forEach(e),Jp.forEach(e),ul=h(rt),Ga=r(rt,"LI",{});var ah=l(Ga);_=r(ah,"P",{});var A=l(_);dl=o(A,"Select the Blend Tree node, and in the Inspector, change the "),Oa=r(A,"STRONG",{});var nh=l(Oa);fl=o(nh,"Blend Type"),nh.forEach(e),ml=o(A," to "),Pa=r(A,"STRONG",{});var oh=l(Pa);gl=o(oh,"2D Simple Directional"),oh.forEach(e),kl=o(A,". Set the "),Na=r(A,"STRONG",{});var sh=l(Na);yl=o(sh,"Parameters"),sh.forEach(e),vl=o(A," below the drop-down to "),Aa=r(A,"STRONG",{});var rh=l(Aa);wl=o(rh,"Horizontal"),rh.forEach(e),bl=o(A," and "),La=r(A,"STRONG",{});var lh=l(La);_l=o(lh,"Vertical"),lh.forEach(e),El=o(A,"."),A.forEach(e),ah.forEach(e),Sl=h(rt),Da=r(rt,"LI",{});var ih=l(Da);Q=r(ih,"P",{});var $t=l(Q);Rl=o($t,"Add eight sub-Blend Trees to this Blend Tree by selecting "),Ba=r($t,"STRONG",{});var ch=l(Ba);Tl=o(ch,"+"),ch.forEach(e),Il=o($t," > "),Ua=r($t,"STRONG",{});var ph=l(Ua);Gl=o(ph,"New Blend Tree"),ph.forEach(e),Ol=o($t,". Each sub-Blend Tree will represent the eight possible directions in which your character can move based on player input. Even if you are only animating your character in four directions, you will still need to account for diagonal input and movement."),$t.forEach(e),ih.forEach(e),Pl=h(rt),ja=r(rt,"LI",{});var hh=l(ja);u=r(hh,"P",{});var f=l(u);Nl=o(f,"Name your eight directions: "),Ma=r(f,"STRONG",{});var uh=l(Ma);Al=o(uh,"Down"),uh.forEach(e),Ll=o(f,", "),Ca=r(f,"STRONG",{});var dh=l(Ca);Dl=o(dh,"Up"),dh.forEach(e),Bl=o(f,", "),Fa=r(f,"STRONG",{});var fh=l(Fa);Ul=o(fh,"Right"),fh.forEach(e),jl=o(f,", "),Wa=r(f,"STRONG",{});var mh=l(Wa);Ml=o(mh,"Left"),mh.forEach(e),Cl=o(f,", "),xa=r(f,"STRONG",{});var gh=l(xa);Fl=o(gh,"RightDown"),gh.forEach(e),Wl=o(f,", "),Va=r(f,"STRONG",{});var kh=l(Va);xl=o(kh,"LeftDown"),kh.forEach(e),Vl=o(f,", "),za=r(f,"STRONG",{});var yh=l(za);zl=o(yh,"RightUp"),yh.forEach(e),Hl=o(f,", "),Ha=r(f,"STRONG",{});var vh=l(Ha);Yl=o(vh,"LeftUp"),vh.forEach(e),ql=o(f,". Enter values for "),Ya=r(f,"STRONG",{});var wh=l(Ya);Kl=o(wh,"PosX"),wh.forEach(e),Xl=o(f," (Horizontal parameter) and "),qa=r(f,"STRONG",{});var bh=l(qa);Ql=o(bh,"PosY"),bh.forEach(e),Jl=o(f," (Vertical parameter), as shown below. You should understand that the values represent directions. If the horizontal axis (x) is -1 and the vertical axis (y) is also -1, that is a left and downward movement, etc. Once you have entered all the values this is what you should see in the Inspector:"),f.forEach(e),hh.forEach(e),rt.forEach(e),Xn=h(a),Ct=r(a,"IMG",{src:!0}),Qn=h(a),bt=r(a,"OL",{start:!0});var _h=l(bt);k=r(_h,"LI",{});var S=l(k);Zl=o(S,"In each of your directional sub-Blend Trees, go to the Inspector and set the "),Ka=r(S,"STRONG",{});var Eh=l(Ka);$l=o(Eh,"Blend Type"),Eh.forEach(e),ti=o(S," to "),Xa=r(S,"STRONG",{});var Sh=l(Xa);ei=o(Sh,"1D"),Sh.forEach(e),ai=o(S,", and set the "),Qa=r(S,"STRONG",{});var Rh=l(Qa);ni=o(Rh,"Parameter"),Rh.forEach(e),oi=o(S," to "),Ja=r(S,"STRONG",{});var Th=l(Ja);si=o(Th,"Speed"),Th.forEach(e),ri=o(S,". Add two motion fields by selecting "),Za=r(S,"STRONG",{});var Ih=l(Za);li=o(Ih,"+"),Ih.forEach(e),ii=o(S," > "),$a=r(S,"STRONG",{});var Gh=l($a);ci=o(Gh,"Add Motion Field"),Gh.forEach(e),pi=o(S,". For each direction, select an idle animation and a walk animation."),S.forEach(e),_h.forEach(e),Jn=h(a),Ft=r(a,"UL",{});var Oh=l(Ft);j=r(Oh,"LI",{});var lt=l(j);hi=o(lt,"For example, for the Down direction, in the first motion field select the IdleDown animation and set its "),tn=r(lt,"STRONG",{});var Ph=l(tn);ui=o(Ph,"Threshold"),Ph.forEach(e),di=o(lt," to "),en=r(lt,"STRONG",{});var Nh=l(en);fi=o(Nh,"0"),Nh.forEach(e),mi=o(lt,", then for the second motion field, select the WalkDown animation and set its "),an=r(lt,"STRONG",{});var Ah=l(an);gi=o(Ah,"Threshold to "),Ah.forEach(e),ki=o(lt,"0.0001**."),lt.forEach(e),Oh.forEach(e),Zn=h(a),Wt=r(a,"IMG",{src:!0}),$n=h(a),tt=r(a,"UL",{});var So=l(tt);nn=r(So,"LI",{});var Lh=l(nn);g=r(Lh,"P",{});var w=l(g);yi=o(w,"What this means is that when the character\u2019s "),on=r(w,"STRONG",{});var Dh=l(on);vi=o(Dh,"Speed"),Dh.forEach(e),wi=o(w," is "),sn=r(w,"STRONG",{});var Bh=l(sn);bi=o(Bh,"0"),Bh.forEach(e),_i=o(w," it should use the IdleDown animation, and when its "),rn=r(w,"STRONG",{});var Uh=l(rn);Ei=o(Uh,"Speed"),Uh.forEach(e),Si=o(w," is greater than "),ln=r(w,"STRONG",{});var jh=l(ln);Ri=o(jh,"0.0001"),jh.forEach(e),Ti=o(w,", which is really any movement at all, it use the WalkUp animation. The "),cn=r(w,"STRONG",{});var Mh=l(cn);Ii=o(Mh,"Speed"),Mh.forEach(e),Gi=o(w," parameter, as well as the "),pn=r(w,"STRONG",{});var Ch=l(pn);Oi=o(Ch,"Horizontal"),Ch.forEach(e),Pi=o(w," and "),hn=r(w,"STRONG",{});var Fh=l(hn);Ni=o(Fh,"Vertical"),Fh.forEach(e),Ai=o(w," parameters, will be set in your character\u2019s movement script."),w.forEach(e),Lh.forEach(e),Li=h(So),un=r(So,"LI",{});var Wh=l(un);G=r(Wh,"P",{});var x=l(G);Di=o(x,"For the Up direction, in the first motion field select the IdleUp animation and set its "),dn=r(x,"STRONG",{});var xh=l(dn);Bi=o(xh,"Threshold"),xh.forEach(e),Ui=o(x," to "),fn=r(x,"STRONG",{});var Vh=l(fn);ji=o(Vh,"0"),Vh.forEach(e),Mi=o(x,", then for the second motion field, select the WalkUp animation and set its "),mn=r(x,"STRONG",{});var zh=l(mn);Ci=o(zh,"Threshold"),zh.forEach(e),Fi=o(x," to "),gn=r(x,"STRONG",{});var Hh=l(gn);Wi=o(Hh,"0.0001"),Hh.forEach(e),xi=o(x,"."),x.forEach(e),Wh.forEach(e),So.forEach(e),to=h(a),xt=r(a,"IMG",{src:!0}),eo=h(a),Vt=r(a,"UL",{});var Yh=l(Vt);O=r(Yh,"LI",{});var V=l(O);Vi=o(V,"Since we will flip our right-facing animation when the player moves the character to the left, we will set the same motion fields for all of the remaining directions: Right, Left, RightDown, LeftDown, RightUp and LeftUp. For each of those, in the first motion field, select the IdleRight animation and set its "),kn=r(V,"STRONG",{});var qh=l(kn);zi=o(qh,"Threshold"),qh.forEach(e),Hi=o(V," to "),yn=r(V,"STRONG",{});var Kh=l(yn);Yi=o(Kh,"0"),Kh.forEach(e),qi=o(V,", then for the second motion field, select the WalkRight animation and set its "),vn=r(V,"STRONG",{});var Xh=l(vn);Ki=o(Xh,"Threshold"),Xh.forEach(e),Xi=o(V," to "),wn=r(V,"STRONG",{});var Qh=l(wn);Qi=o(Qh,"0.0001"),Qh.forEach(e),Ji=o(V,"."),V.forEach(e),Yh.forEach(e),ao=h(a),zt=r(a,"IMG",{src:!0}),no=h(a),Ht=r(a,"P",{});var Jh=l(Ht);Zi=o(Jh,"When all of this is finished, your Blend Tree should look something like this:"),Jh.forEach(e),oo=h(a),Yt=r(a,"IMG",{src:!0}),so=h(a),qt=r(a,"H2",{});var Zh=l(qt);$i=o(Zh,"A basic movement script"),Zh.forEach(e),ro=h(a),Kt=r(a,"P",{});var $h=l(Kt);tc=o($h,"Now that you have your character rigged and animated, and parameters setup in the Animator to conditionally play those animations based on player input, you\u2019ll need to create a movement script that sets those parameters and moves your character around the screen."),$h.forEach(e),lo=h(a),et=r(a,"P",{});var Ro=l(et);ec=o(Ro,"The script below should do all of that. Attach this script to the parent GameObject that holds your PSB objects, and remember to name your right-facing PSB object "),bn=r(Ro,"STRONG",{});var tu=l(bn);ac=o(tu,"RigRight"),tu.forEach(e),nc=o(Ro,", or this won\u2019t work."),Ro.forEach(e),io=h(a),_t=r(a,"PRE",{class:!0});var nu=l(_t);nu.forEach(e),this.h()},h(){z(Rt.src,sc="/images/walking-sample.gif")||d(Rt,"src",sc),d(it,"href","https://stackoverflow.com/questions/58848855/unity-2d-game-dev-converting-psd-to-psb-without-photoshop"),d(it,"rel","nofollow"),d(pt,"href","https://github.com/notslot/tutorial-2d-anim-character"),d(pt,"rel","nofollow"),z(Pt.src,rc="/images/skinning-editor.png")||d(Pt,"src",rc),d(R,"start","3"),z(At.src,lc="/images/bone-effector.png")||d(At,"src",lc),d(K,"start","6"),d(U,"start","2"),z(Ut.src,ic="/images/isactive.png")||d(Ut,"src",ic),d(X,"start","5"),d(yt,"href","https://www.youtube.com/watch?v=yfsqai3ivyA"),d(yt,"rel","nofollow"),z(Mt.src,cc="/images/parameters.png")||d(Mt,"src",cc),d(T,"start","4"),z(Ct.src,pc="/images/subblendtrees.png")||d(Ct,"src",pc),d(bt,"start","8"),z(Wt.src,hc="/images/motionfields-down.png")||d(Wt,"src",hc),z(xt.src,uc="/images/motionfields-up.png")||d(xt,"src",uc),z(zt.src,dc="/images/motionfields-right.png")||d(zt,"src",dc),z(Yt.src,fc="/images/blendtree.png")||d(Yt,"src",fc),d(_t,"class","language-csharp")},m(a,i){c(a,J,i),t(J,To),c(a,En,i),c(a,St,i),t(St,Io),c(a,Sn,i),c(a,Rt,i),c(a,Rn,i),c(a,Tt,i),t(Tt,Go),c(a,Tn,i),c(a,It,i),t(It,Oo),c(a,In,i),c(a,H,i),t(H,te),t(te,Po),t(H,No),t(H,it),t(it,Ao),t(H,Lo),c(a,Gn,i),c(a,Gt,i),t(Gt,Do),c(a,On,i),c(a,y,i),t(y,ee),t(ee,m),t(m,Bo),t(m,ae),t(ae,Uo),t(m,jo),t(m,ne),t(ne,Mo),t(m,Co),t(m,oe),t(oe,Fo),t(m,Wo),t(m,se),t(se,xo),t(m,Vo),t(m,re),t(re,zo),t(m,Ho),t(m,le),t(le,Yo),t(m,qo),t(m,ie),t(ie,Ko),t(m,Xo),t(y,Qo),t(y,ce),t(ce,pe),t(pe,Jo),t(y,Zo),t(y,he),t(he,ct),t(ct,$o),t(ct,pt),t(pt,ts),t(ct,es),t(y,as),t(y,ue),t(ue,ht),t(ht,ns),t(ht,de),t(de,os),t(ht,ss),t(y,rs),t(y,fe),t(fe,ut),t(ut,ls),t(ut,me),t(me,is),t(ut,cs),t(y,ps),t(y,ge),t(ge,L),t(L,hs),t(L,ke),t(ke,us),t(L,ds),t(L,ye),t(ye,fs),t(L,ms),t(L,ve),t(ve,gs),t(L,ks),c(a,Pn,i),c(a,Ot,i),t(Ot,ys),c(a,Nn,i),c(a,Z,i),t(Z,we),t(we,Y),t(Y,vs),t(Y,be),t(be,ws),t(Y,bs),t(Y,_e),t(_e,_s),t(Y,Es),t(Z,Ss),t(Z,Ee),t(Ee,Se),t(Se,Rs),c(a,An,i),c(a,Pt,i),c(a,Ln,i),c(a,R,i),t(R,Re),t(Re,q),t(q,Ts),t(q,Te),t(Te,Is),t(q,Gs),t(q,Ie),t(Ie,Os),t(q,Ps),t(R,Ns),t(R,Ge),t(Ge,D),t(D,As),t(D,Oe),t(Oe,Ls),t(D,Ds),t(D,Pe),t(Pe,Bs),t(D,Us),t(D,Ne),t(Ne,js),t(D,Ms),t(R,Cs),t(R,Ae),t(Ae,M),t(M,Fs),t(M,Le),t(Le,Ws),t(M,xs),t(M,De),t(De,Vs),t(M,zs),t(M,Be),t(Be,Hs),t(R,Ys),t(R,Ue),t(Ue,je),t(je,qs),c(a,Dn,i),c(a,Nt,i),t(Nt,Ks),c(a,Bn,i),c(a,E,i),t(E,Me),t(Me,Ce),t(Ce,Xs),t(E,Qs),t(E,Fe),t(Fe,We),t(We,Js),t(E,Zs),t(E,xe),t(xe,dt),t(dt,$s),t(dt,Ve),t(Ve,tr),t(dt,er),t(E,ar),t(E,ze),t(ze,ft),t(ft,nr),t(ft,He),t(He,or),t(ft,sr),t(E,rr),t(E,mt),t(mt,gt),t(gt,lr),t(gt,Ye),t(Ye,ir),t(gt,cr),t(mt,pr),t(mt,kt),t(kt,qe),t(qe,hr),t(kt,ur),t(kt,Ke),t(Ke,dr),c(a,Un,i),c(a,At,i),c(a,jn,i),c(a,K,i),t(K,Xe),t(Xe,Qe),t(Qe,fr),t(K,mr),t(K,Je),t(Je,Ze),t(Ze,gr),c(a,Mn,i),c(a,Lt,i),t(Lt,kr),c(a,Cn,i),c(a,Dt,i),t(Dt,B),t(B,yr),t(B,$e),t($e,vr),t(B,wr),t(B,ta),t(ta,br),t(B,_r),t(B,ea),t(ea,Er),t(B,Sr),c(a,Fn,i),c(a,Bt,i),t(Bt,aa),t(aa,Rr),c(a,Wn,i),c(a,U,i),t(U,na),t(na,oa),t(oa,Tr),t(U,Ir),t(U,sa),t(sa,ra),t(ra,Gr),t(U,Or),t(U,la),t(la,ia),t(ia,Pr),c(a,xn,i),c(a,Ut,i),c(a,Vn,i),c(a,X,i),t(X,ca),t(ca,pa),t(pa,Nr),t(X,Ar),t(X,ha),t(ha,ua),t(ua,Lr),c(a,zn,i),c(a,jt,i),t(jt,Dr),c(a,Hn,i),c(a,$,i),t($,Br),t($,yt),t(yt,Ur),t($,jr),c(a,Yn,i),c(a,C,i),t(C,da),t(da,vt),t(vt,Mr),t(vt,fa),t(fa,Cr),t(vt,Fr),t(C,Wr),t(C,ma),t(ma,wt),t(wt,xr),t(wt,ga),t(ga,Vr),t(wt,zr),t(C,Hr),t(C,ka),t(ka,b),t(b,Yr),t(b,ya),t(ya,qr),t(b,Kr),t(b,va),t(va,Xr),t(b,Qr),t(b,wa),t(wa,Jr),t(b,Zr),t(b,ba),t(ba,$r),t(b,tl),t(b,_a),t(_a,el),t(b,al),c(a,qn,i),c(a,Mt,i),c(a,Kn,i),c(a,T,i),t(T,Ea),t(Ea,I),t(I,nl),t(I,Sa),t(Sa,ol),t(I,sl),t(I,Ra),t(Ra,rl),t(I,ll),t(I,Ta),t(Ta,il),t(I,cl),t(I,Ia),t(Ia,pl),t(I,hl),t(T,ul),t(T,Ga),t(Ga,_),t(_,dl),t(_,Oa),t(Oa,fl),t(_,ml),t(_,Pa),t(Pa,gl),t(_,kl),t(_,Na),t(Na,yl),t(_,vl),t(_,Aa),t(Aa,wl),t(_,bl),t(_,La),t(La,_l),t(_,El),t(T,Sl),t(T,Da),t(Da,Q),t(Q,Rl),t(Q,Ba),t(Ba,Tl),t(Q,Il),t(Q,Ua),t(Ua,Gl),t(Q,Ol),t(T,Pl),t(T,ja),t(ja,u),t(u,Nl),t(u,Ma),t(Ma,Al),t(u,Ll),t(u,Ca),t(Ca,Dl),t(u,Bl),t(u,Fa),t(Fa,Ul),t(u,jl),t(u,Wa),t(Wa,Ml),t(u,Cl),t(u,xa),t(xa,Fl),t(u,Wl),t(u,Va),t(Va,xl),t(u,Vl),t(u,za),t(za,zl),t(u,Hl),t(u,Ha),t(Ha,Yl),t(u,ql),t(u,Ya),t(Ya,Kl),t(u,Xl),t(u,qa),t(qa,Ql),t(u,Jl),c(a,Xn,i),c(a,Ct,i),c(a,Qn,i),c(a,bt,i),t(bt,k),t(k,Zl),t(k,Ka),t(Ka,$l),t(k,ti),t(k,Xa),t(Xa,ei),t(k,ai),t(k,Qa),t(Qa,ni),t(k,oi),t(k,Ja),t(Ja,si),t(k,ri),t(k,Za),t(Za,li),t(k,ii),t(k,$a),t($a,ci),t(k,pi),c(a,Jn,i),c(a,Ft,i),t(Ft,j),t(j,hi),t(j,tn),t(tn,ui),t(j,di),t(j,en),t(en,fi),t(j,mi),t(j,an),t(an,gi),t(j,ki),c(a,Zn,i),c(a,Wt,i),c(a,$n,i),c(a,tt,i),t(tt,nn),t(nn,g),t(g,yi),t(g,on),t(on,vi),t(g,wi),t(g,sn),t(sn,bi),t(g,_i),t(g,rn),t(rn,Ei),t(g,Si),t(g,ln),t(ln,Ri),t(g,Ti),t(g,cn),t(cn,Ii),t(g,Gi),t(g,pn),t(pn,Oi),t(g,Pi),t(g,hn),t(hn,Ni),t(g,Ai),t(tt,Li),t(tt,un),t(un,G),t(G,Di),t(G,dn),t(dn,Bi),t(G,Ui),t(G,fn),t(fn,ji),t(G,Mi),t(G,mn),t(mn,Ci),t(G,Fi),t(G,gn),t(gn,Wi),t(G,xi),c(a,to,i),c(a,xt,i),c(a,eo,i),c(a,Vt,i),t(Vt,O),t(O,Vi),t(O,kn),t(kn,zi),t(O,Hi),t(O,yn),t(yn,Yi),t(O,qi),t(O,vn),t(vn,Ki),t(O,Xi),t(O,wn),t(wn,Qi),t(O,Ji),c(a,ao,i),c(a,zt,i),c(a,no,i),c(a,Ht,i),t(Ht,Zi),c(a,oo,i),c(a,Yt,i),c(a,so,i),c(a,qt,i),t(qt,$i),c(a,ro,i),c(a,Kt,i),t(Kt,tc),c(a,lo,i),c(a,et,i),t(et,ec),t(et,bn),t(bn,ac),t(et,nc),c(a,io,i),c(a,_t,i),_t.innerHTML=au},p:oc,i:oc,o:oc,d(a){a&&e(J),a&&e(En),a&&e(St),a&&e(Sn),a&&e(Rt),a&&e(Rn),a&&e(Tt),a&&e(Tn),a&&e(It),a&&e(In),a&&e(H),a&&e(Gn),a&&e(Gt),a&&e(On),a&&e(y),a&&e(Pn),a&&e(Ot),a&&e(Nn),a&&e(Z),a&&e(An),a&&e(Pt),a&&e(Ln),a&&e(R),a&&e(Dn),a&&e(Nt),a&&e(Bn),a&&e(E),a&&e(Un),a&&e(At),a&&e(jn),a&&e(K),a&&e(Mn),a&&e(Lt),a&&e(Cn),a&&e(Dt),a&&e(Fn),a&&e(Bt),a&&e(Wn),a&&e(U),a&&e(xn),a&&e(Ut),a&&e(Vn),a&&e(X),a&&e(zn),a&&e(jt),a&&e(Hn),a&&e($),a&&e(Yn),a&&e(C),a&&e(qn),a&&e(Mt),a&&e(Kn),a&&e(T),a&&e(Xn),a&&e(Ct),a&&e(Qn),a&&e(bt),a&&e(Jn),a&&e(Ft),a&&e(Zn),a&&e(Wt),a&&e($n),a&&e(tt),a&&e(to),a&&e(xt),a&&e(eo),a&&e(Vt),a&&e(ao),a&&e(zt),a&&e(no),a&&e(Ht),a&&e(oo),a&&e(Yt),a&&e(so),a&&e(qt),a&&e(ro),a&&e(Kt),a&&e(lo),a&&e(et),a&&e(io),a&&e(_t)}}}const cu={title:"Rigging and animating a character in four (or eight) directions - Unity 2D Animation",slug:"2022-01-23-unity-sprite-rig",date:"2022-01-23",type:"post"};class pu extends ou{constructor(J){super();su(this,J,null,lu,ru,{})}}export{pu as default,cu as metadata};
