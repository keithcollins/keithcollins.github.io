import{S as Z,i as $,s as tt,e as i,t as h,k as p,c as a,a as u,h as l,d as e,m,_ as W,b as X,g as s,F as r,I as F}from"./vendor-15527e3e.js";function et(Y){let n,H,b,d,B,k,f,U,I,G,N,T,y,R,E,c,D,P,g,S,x,v,j,M,w,z,q,_,C;return{c(){n=i("p"),H=h("Now that I have pathfinding running smoothly, I tried out some tests. Here it is with many units trying to get to the same point from random points on the map:"),b=p(),d=i("img"),k=p(),f=i("p"),U=h("The toughest part of this was dynamically finding a place for each of them to stop without overlapping with each other. To do that I kind of used a poor man\u2019s breadth-first search for each unit, looking at the neighbors of its goal point to find a free time, then neighbors of that neighbor, etc. It works "),I=i("em"),G=h("okay"),N=h(", but not perfectly. I\u2019ve decided I\u2019ll wait to solve that problem until I\u2019m sure I need to in an actual game."),T=p(),y=i("p"),R=h("I also added forest tiles (the brown ones) and gave them a movement cost of five, to see how the guys would navigate around it:"),E=p(),c=i("img"),P=p(),g=i("p"),S=h("A very helpful and smart developer on Reddit said this test isn\u2019t quite conclusive though, and suggested I try it with a couple of other setups:"),x=p(),v=i("p"),j=h("\u201CAfter looking at the gif, I noticed something. The forest looks to be 9 tiles vertically. The cost to go straight through is 5*9, which is 45. That\u2019s a much higher cost than going around the forest perimeter where normal tiles are 1 each. Maybe that\u2019s okay, and you want forests to be something the ship travels through on rare occasions. That\u2019s up to you.\u201D"),M=p(),w=i("p"),z=h("\u201CHowever, to see if forest tiles are implemented correctly, try these tests and any similar ones you can come up with: a test where the goal tile is completely surrounded by a ring of forest tiles, a forest that is only 1 tile high instead of 9, and a U shape forest to see if the ships go around the U or straight through the forest. The layout you have in the gif makes the forest too expensive, so we can\u2019t say for sure if they are implemented properly.\u201D"),q=p(),_=i("p"),C=h("I\u2019ll definitely try those tests out soon."),this.h()},l(t){n=a(t,"P",{});var o=u(n);H=l(o,"Now that I have pathfinding running smoothly, I tried out some tests. Here it is with many units trying to get to the same point from random points on the map:"),o.forEach(e),b=m(t),d=a(t,"IMG",{src:!0}),k=m(t),f=a(t,"P",{});var A=u(f);U=l(A,"The toughest part of this was dynamically finding a place for each of them to stop without overlapping with each other. To do that I kind of used a poor man\u2019s breadth-first search for each unit, looking at the neighbors of its goal point to find a free time, then neighbors of that neighbor, etc. It works "),I=a(A,"EM",{});var J=u(I);G=l(J,"okay"),J.forEach(e),N=l(A,", but not perfectly. I\u2019ve decided I\u2019ll wait to solve that problem until I\u2019m sure I need to in an actual game."),A.forEach(e),T=m(t),y=a(t,"P",{});var K=u(y);R=l(K,"I also added forest tiles (the brown ones) and gave them a movement cost of five, to see how the guys would navigate around it:"),K.forEach(e),E=m(t),c=a(t,"IMG",{src:!0}),P=m(t),g=a(t,"P",{});var L=u(g);S=l(L,"A very helpful and smart developer on Reddit said this test isn\u2019t quite conclusive though, and suggested I try it with a couple of other setups:"),L.forEach(e),x=m(t),v=a(t,"P",{});var O=u(v);j=l(O,"\u201CAfter looking at the gif, I noticed something. The forest looks to be 9 tiles vertically. The cost to go straight through is 5*9, which is 45. That\u2019s a much higher cost than going around the forest perimeter where normal tiles are 1 each. Maybe that\u2019s okay, and you want forests to be something the ship travels through on rare occasions. That\u2019s up to you.\u201D"),O.forEach(e),M=m(t),w=a(t,"P",{});var Q=u(w);z=l(Q,"\u201CHowever, to see if forest tiles are implemented correctly, try these tests and any similar ones you can come up with: a test where the goal tile is completely surrounded by a ring of forest tiles, a forest that is only 1 tile high instead of 9, and a U shape forest to see if the ships go around the U or straight through the forest. The layout you have in the gif makes the forest too expensive, so we can\u2019t say for sure if they are implemented properly.\u201D"),Q.forEach(e),q=m(t),_=a(t,"P",{});var V=u(_);C=l(V,"I\u2019ll definitely try those tests out soon."),V.forEach(e),this.h()},h(){W(d.src,B="/images/maze.gif")||X(d,"src",B),W(c.src,D="/images/forest.gif")||X(c,"src",D)},m(t,o){s(t,n,o),r(n,H),s(t,b,o),s(t,d,o),s(t,k,o),s(t,f,o),r(f,U),r(f,I),r(I,G),r(f,N),s(t,T,o),s(t,y,o),r(y,R),s(t,E,o),s(t,c,o),s(t,P,o),s(t,g,o),r(g,S),s(t,x,o),s(t,v,o),r(v,j),s(t,M,o),s(t,w,o),r(w,z),s(t,q,o),s(t,_,o),r(_,C)},p:F,i:F,o:F,d(t){t&&e(n),t&&e(b),t&&e(d),t&&e(k),t&&e(f),t&&e(T),t&&e(y),t&&e(E),t&&e(c),t&&e(P),t&&e(g),t&&e(x),t&&e(v),t&&e(M),t&&e(w),t&&e(q),t&&e(_)}}}const st={title:"Pathfinding tests",slug:"2016-08-24-pathfinding_tests",date:"2016-08-24",type:"post"};class it extends Z{constructor(n){super();$(this,n,null,et,tt,{})}}export{it as default,st as metadata};
