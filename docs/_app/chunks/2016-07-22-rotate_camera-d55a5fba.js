import{S as Jn,i as Wn,s as Xn,e as o,k as u,t,c as p,m as k,a as l,h as e,d as s,_ as Zn,b as qn,g as m,F as n,I as Sn}from"./vendor-15527e3e.js";function $n(Nn){let f,Ln,j,v,V,B,C,Y,H,I,J,U,c,R,W,X,y,Z,x,$,nn,an,b,sn,S,tn,en,on,L,pn,cn,d,ln,T,rn,un,O,kn,mn,dn,D,hn,fn,g,yn,G,bn,gn,wn,h,vn,Q,Cn,In,A,_n,En,Pn,M,Rn,K,_,xn,z,w,Vn=`<code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token comment">// Be sure to include System.Collections.Generic in order to use a List, which is like an Array:</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CameraControl</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span> <span class="token punctuation">&#123;</span>

  <span class="token comment">// "Speed" of rotation, must be between 0 and 1</span>
  <span class="token comment">// Iterates from this number to one in each frame after a rotate is started,</span>
  <span class="token comment">// so lower is slower.</span>
  <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> rotateSpeed <span class="token operator">=</span> <span class="token number">0.06f</span><span class="token punctuation">;</span>

  <span class="token comment">// Declare a list to hold all possible camera rotation positions</span>
  <span class="token keyword">private</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>Quaternion<span class="token punctuation">></span></span> allRotations<span class="token punctuation">;</span>
  <span class="token comment">// Declare a starting index for that List</span>
  <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> currentIndex<span class="token punctuation">;</span>

  <span class="token comment">// Use this for initialization</span>
  <span class="token return-type class-name"><span class="token keyword">void</span></span> Start <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Define the allRotations list if it's null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>allRotations <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      allRotations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Quaternion<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// Add all possible rotations to List</span>
    allRotations<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Quaternion<span class="token punctuation">.</span><span class="token function">Euler</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    allRotations<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Quaternion<span class="token punctuation">.</span><span class="token function">Euler</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    allRotations<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Quaternion<span class="token punctuation">.</span><span class="token function">Euler</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    allRotations<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Quaternion<span class="token punctuation">.</span><span class="token function">Euler</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">315</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Set index to start at first Quaternion in List</span>
    currentIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// Update is called once per frame</span>
  <span class="token return-type class-name"><span class="token keyword">void</span></span> Update <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Get player position</span>
    <span class="token class-name">GameObject</span> player <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Vector3</span> pos <span class="token operator">=</span> player<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>

    <span class="token comment">// Follow player. This is only necessary if you have another script setup to</span>
    <span class="token comment">// move the player around.</span>
    <span class="token class-name">Vector3</span> cameraPos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>
    cameraPos<span class="token punctuation">.</span>x <span class="token operator">=</span> pos<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
    cameraPos<span class="token punctuation">.</span>z <span class="token operator">=</span> pos<span class="token punctuation">.</span>z<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> cameraPos<span class="token punctuation">;</span>

    <span class="token comment">// Initiate rotation direction based on key input</span>
    <span class="token comment">// Q rotates to left</span>
    <span class="token comment">// E rotates to right</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      currentIndex <span class="token operator">=</span> <span class="token punctuation">(</span>currentIndex <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">?</span> currentIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token function">RotateCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>E<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      currentIndex <span class="token operator">=</span> <span class="token punctuation">(</span>currentIndex <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">?</span> currentIndex <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>
      <span class="token function">RotateCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// If the rotation Quaternion in this frame does not match one in the List,</span>
    <span class="token comment">// go to Slerp in RotateCamera to continue rotation iteration.</span>
    <span class="token comment">// This could probably be done in a for loop between rotateSpeed and 1.0 using</span>
    <span class="token comment">// Lerp instead of Slerp, but not sure.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>allRotations<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">RotateCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// Rotate the camera</span>
  <span class="token comment">// Quaternion Slerp(Quaternion from, Quaternion to, float t);</span>
  <span class="token comment">// Slerp spherically interpolates between 'from' and 'to' by t.</span>
  <span class="token comment">// The parameter t is clamped to the range [0, 1].</span>
  <span class="token return-type class-name"><span class="token keyword">void</span></span> RotateCamera <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">Slerp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">,</span> allRotations<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> rotateSpeed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){f=o("img"),j=u(),v=o("p"),V=t("I\u2019ve been digging into C# and Unity for the past few weeks and thought I might start sharing my progress as I go. This post is instructional, partly so that I remember what I did. But I don\u2019t expect many future posts to be how-tos so much as thoughts and insights."),B=u(),C=o("p"),Y=t("Tonight I learned how to rotate a camera around a target object (probably a player character) in both directions. This should work for various setups, but I\u2019m using an orthographic/isometric angle and rotating only around the Y axis at 45, 135, 225 and 315 degrees. This should work whether your camera is set to Orthographic or Perspective."),H=u(),I=o("h2"),J=t("Scene setup"),U=u(),c=o("ol"),R=o("li"),W=t("Add an empty GameObject to the project Hierarchy pane."),X=u(),y=o("li"),Z=t("Name it something like "),x=o("code"),$=t("CameraParent"),nn=t(" and drag your Main Camera into it."),an=u(),b=o("li"),sn=t("Give "),S=o("code"),tn=t("CameraParent"),en=t(" these settings in its Transform: Position 0,0,0; Rotation 30,45,0; Scale 1,1,1."),on=u(),L=o("li"),pn=t("Make sure the Main Camera\u2019s Transform has these settings: Position 0,0,-10; Rotation 0,0,0; Scale 1,1,1."),cn=u(),d=o("li"),ln=t("Add a 3D cube to the Hierarchy, rename it to "),T=o("code"),rn=t("Player"),un=t(", tag it as "),O=o("code"),kn=t("Player"),mn=t(", and give it a Rigidbody component."),dn=u(),D=o("li"),hn=t("Give player these settings in Transform: Position 0,5,0; Rotation 0,0,0; Scale 1,1.7,1."),fn=u(),g=o("li"),yn=t("Add some kind of ground for the "),G=o("code"),bn=t("Player"),gn=t(" to stand on at Position 0,0,0. Make sure it has a Box Collider and does not have a Rigidbody."),wn=u(),h=o("li"),vn=t("Create a C# script called "),Q=o("code"),Cn=t("CameraControl"),In=t(" and drag it onto "),A=o("code"),_n=t("CameraParent"),En=t(" to attach it as a component."),Pn=u(),M=o("li"),Rn=t("Open CameraControl.cs in whatever text editor."),K=u(),_=o("p"),xn=t("Rather than step through the script, here\u2019s the entire thing with detailed comments:"),z=u(),w=o("pre"),this.h()},l(a){f=p(a,"IMG",{src:!0}),j=k(a),v=p(a,"P",{});var r=l(v);V=e(r,"I\u2019ve been digging into C# and Unity for the past few weeks and thought I might start sharing my progress as I go. This post is instructional, partly so that I remember what I did. But I don\u2019t expect many future posts to be how-tos so much as thoughts and insights."),r.forEach(s),B=k(a),C=p(a,"P",{});var Tn=l(C);Y=e(Tn,"Tonight I learned how to rotate a camera around a target object (probably a player character) in both directions. This should work for various setups, but I\u2019m using an orthographic/isometric angle and rotating only around the Y axis at 45, 135, 225 and 315 degrees. This should work whether your camera is set to Orthographic or Perspective."),Tn.forEach(s),H=k(a),I=p(a,"H2",{});var On=l(I);J=e(On,"Scene setup"),On.forEach(s),U=k(a),c=p(a,"OL",{});var i=l(c);R=p(i,"LI",{});var Dn=l(R);W=e(Dn,"Add an empty GameObject to the project Hierarchy pane."),Dn.forEach(s),X=k(i),y=p(i,"LI",{});var F=l(y);Z=e(F,"Name it something like "),x=p(F,"CODE",{});var Gn=l(x);$=e(Gn,"CameraParent"),Gn.forEach(s),nn=e(F," and drag your Main Camera into it."),F.forEach(s),an=k(i),b=p(i,"LI",{});var q=l(b);sn=e(q,"Give "),S=p(q,"CODE",{});var Qn=l(S);tn=e(Qn,"CameraParent"),Qn.forEach(s),en=e(q," these settings in its Transform: Position 0,0,0; Rotation 30,45,0; Scale 1,1,1."),q.forEach(s),on=k(i),L=p(i,"LI",{});var An=l(L);pn=e(An,"Make sure the Main Camera\u2019s Transform has these settings: Position 0,0,-10; Rotation 0,0,0; Scale 1,1,1."),An.forEach(s),cn=k(i),d=p(i,"LI",{});var E=l(d);ln=e(E,"Add a 3D cube to the Hierarchy, rename it to "),T=p(E,"CODE",{});var Mn=l(T);rn=e(Mn,"Player"),Mn.forEach(s),un=e(E,", tag it as "),O=p(E,"CODE",{});var jn=l(O);kn=e(jn,"Player"),jn.forEach(s),mn=e(E,", and give it a Rigidbody component."),E.forEach(s),dn=k(i),D=p(i,"LI",{});var Bn=l(D);hn=e(Bn,"Give player these settings in Transform: Position 0,5,0; Rotation 0,0,0; Scale 1,1.7,1."),Bn.forEach(s),fn=k(i),g=p(i,"LI",{});var N=l(g);yn=e(N,"Add some kind of ground for the "),G=p(N,"CODE",{});var Hn=l(G);bn=e(Hn,"Player"),Hn.forEach(s),gn=e(N," to stand on at Position 0,0,0. Make sure it has a Box Collider and does not have a Rigidbody."),N.forEach(s),wn=k(i),h=p(i,"LI",{});var P=l(h);vn=e(P,"Create a C# script called "),Q=p(P,"CODE",{});var Un=l(Q);Cn=e(Un,"CameraControl"),Un.forEach(s),In=e(P," and drag it onto "),A=p(P,"CODE",{});var Kn=l(A);_n=e(Kn,"CameraParent"),Kn.forEach(s),En=e(P," to attach it as a component."),P.forEach(s),Pn=k(i),M=p(i,"LI",{});var zn=l(M);Rn=e(zn,"Open CameraControl.cs in whatever text editor."),zn.forEach(s),i.forEach(s),K=k(a),_=p(a,"P",{});var Fn=l(_);xn=e(Fn,"Rather than step through the script, here\u2019s the entire thing with detailed comments:"),Fn.forEach(s),z=k(a),w=p(a,"PRE",{class:!0});var Yn=l(w);Yn.forEach(s),this.h()},h(){Zn(f.src,Ln="/images/camera.gif")||qn(f,"src",Ln),qn(w,"class","language-csharp")},m(a,r){m(a,f,r),m(a,j,r),m(a,v,r),n(v,V),m(a,B,r),m(a,C,r),n(C,Y),m(a,H,r),m(a,I,r),n(I,J),m(a,U,r),m(a,c,r),n(c,R),n(R,W),n(c,X),n(c,y),n(y,Z),n(y,x),n(x,$),n(y,nn),n(c,an),n(c,b),n(b,sn),n(b,S),n(S,tn),n(b,en),n(c,on),n(c,L),n(L,pn),n(c,cn),n(c,d),n(d,ln),n(d,T),n(T,rn),n(d,un),n(d,O),n(O,kn),n(d,mn),n(c,dn),n(c,D),n(D,hn),n(c,fn),n(c,g),n(g,yn),n(g,G),n(G,bn),n(g,gn),n(c,wn),n(c,h),n(h,vn),n(h,Q),n(Q,Cn),n(h,In),n(h,A),n(A,_n),n(h,En),n(c,Pn),n(c,M),n(M,Rn),m(a,K,r),m(a,_,r),n(_,xn),m(a,z,r),m(a,w,r),w.innerHTML=Vn},p:Sn,i:Sn,o:Sn,d(a){a&&s(f),a&&s(j),a&&s(v),a&&s(B),a&&s(C),a&&s(H),a&&s(I),a&&s(U),a&&s(c),a&&s(K),a&&s(_),a&&s(z),a&&s(w)}}}const aa={title:"Rotating a camera around a point",slug:"2016-07-22-rotate_camera",date:"2016-07-22",type:"post"};class sa extends Jn{constructor(f){super();Wn(this,f,null,$n,Xn,{})}}export{sa as default,aa as metadata};
