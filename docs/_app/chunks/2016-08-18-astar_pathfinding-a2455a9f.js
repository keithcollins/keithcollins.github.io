import{S as Wa,i as Ha,s as Ga,e as l,k as r,t as e,c,m as u,a as i,h as o,d as s,_ as Na,b as m,g as p,F as n,I as Ia}from"./vendor-15527e3e.js";function Ya(Ca){let f,Ea,C,k,X,v,Z,$,g,aa,_,sa,na,ta,M,d,ea,I,oa,pa,O,h,la,R,ca,ia,P,ra,ua,z,E,Ma=`<code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">TileType</span> <span class="token punctuation">&#123;</span>
  Floor <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  Forest <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
  Wall <span class="token operator">=</span> System<span class="token punctuation">.</span>Int32<span class="token punctuation">.</span>MaxValue
<span class="token punctuation">&#125;</span></code>`,B,w,ka,F,ha,ma,U,b,fa,D,da,wa,j,S,Oa=`<code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Location<span class="token punctuation">[</span><span class="token punctuation">]</span></span> DIRS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Location</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// to right of tile</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Location</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// below tile</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Location</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// to left of tile</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Location</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// above tile</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Location</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// diagonal top right</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Location</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// diagonal top left</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Location</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// diagonal bottom right</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Location</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// diagonal bottom left</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,W,y,ba,q,ya,va,H,A,ga,G,x,za=`<code class="language-csharp"><span class="token comment">// If the heuristic = 2f, the movement is diagonal</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token function">Cost</span><span class="token punctuation">(</span><span class="token class-name">Location</span> a<span class="token punctuation">,</span> <span class="token class-name">Location</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>AStarSearch<span class="token punctuation">.</span><span class="token function">Heuristic</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>tiles<span class="token punctuation">[</span>b<span class="token punctuation">.</span>x<span class="token punctuation">,</span>b<span class="token punctuation">.</span>z<span class="token punctuation">]</span> <span class="token operator">*</span> Mathf<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>tiles<span class="token punctuation">[</span>b<span class="token punctuation">.</span>x<span class="token punctuation">,</span>b<span class="token punctuation">.</span>z<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,N,T,_a;return{c(){f=l("img"),C=r(),k=l("p"),X=e("I recently I "),v=l("a"),Z=e("took a shot"),$=e(" at implementing an A"),g=l("em"),aa=e("(a-star) pathfinding algorithm in Unity. Much of the work draws from Red Blob\u2019s "),_=l("a"),sa=e("C# implementation"),na=e(" of A"),ta=e(", with a few changes to make it work in a Unity project and a little bit of optimization. It seems to be working well, but keep in mind that this is my first attempt and I\u2019m still new to Unity. Also, I don\u2019t expect to keep updating the script I\u2019ve uploaded here as I work on it within my project."),M=r(),d=l("p"),ea=e("If you\u2019re new to pathfinding (like me), check out Red Blob\u2019s wonderful"),I=l("a"),oa=e("pathfinding tutorial"),pa=e(" for a primer. The script is extensively commented, but here are a few notes:"),O=r(),h=l("p"),la=e("This "),R=l("code"),ca=e("enum"),ia=e(" defines the types of possible tiles to "),P=l("code"),ra=e("SquareGrid"),ua=e(":"),z=r(),E=l("pre"),B=r(),w=l("p"),ka=e("Note that Floor, Forest and Wall are somewhat arbitrary, but also represent three different types of tiles, which are all handled differently by A*. Floors are Passable, walls are not, and forests are passable with a higher movement cost. You\u2019ll want to customize this to fit your use case. One thing to consider is to create a type like "),F=l("code"),ha=e("Occupied"),ma=e(", so you can keep track of tiles that sprites are currently using."),U=r(),b=l("p"),fa=e("The "),D=l("code"),da=e("DIRS"),wa=e(" array is also worth checking out:"),j=r(),S=l("pre"),W=r(),y=l("p"),ba=e("The "),q=l("code"),ya=e("DIRS"),va=e(" array is important in the pathfinding step where we look for a given tile\u2019s neighbors. In Red Blob\u2019s tutorial and implementation, it only looked for neighbors above, below, and next to each tile. That leads to paths along straight lines and prohibits diagonal movement, which feels weird when you see it in action. So I added diagonals to the directions above. I\u2019ve noticed at least one issue this creates, though. If there are two walls that are diagonal to each other, the sprite can pass diagonally through them. I have a few ideas to solve this, but if anyone knows a good solution, please leave a comment."),H=r(),A=l("p"),ga=e("For diagonal movement to work well, we also have to make diagonal movement cost a little more than regular movement:"),G=r(),x=l("pre"),N=r(),T=l("p"),_a=e("If the heuristic between a and b is 2, the movement is diagonal and its cost should be the cost of the tile multiplied by the square root of 2. Where each of the sides of a floor tile have a length of 1, for exmple, Sqrt(2) is the literal length of the diagonal. And we can apply the same forumla to tiles of higher costs as well."),this.h()},l(a){f=c(a,"IMG",{src:!0}),C=u(a),k=c(a,"P",{});var t=i(k);X=o(t,"I recently I "),v=c(t,"A",{href:!0,rel:!0});var Sa=i(v);Z=o(Sa,"took a shot"),Sa.forEach(s),$=o(t," at implementing an A"),g=c(t,"EM",{});var Y=i(g);aa=o(Y,"(a-star) pathfinding algorithm in Unity. Much of the work draws from Red Blob\u2019s "),_=c(Y,"A",{href:!0,rel:!0});var xa=i(_);sa=o(xa,"C# implementation"),xa.forEach(s),na=o(Y," of A"),Y.forEach(s),ta=o(t,", with a few changes to make it work in a Unity project and a little bit of optimization. It seems to be working well, but keep in mind that this is my first attempt and I\u2019m still new to Unity. Also, I don\u2019t expect to keep updating the script I\u2019ve uploaded here as I work on it within my project."),t.forEach(s),M=u(a),d=c(a,"P",{});var V=i(d);ea=o(V,"If you\u2019re new to pathfinding (like me), check out Red Blob\u2019s wonderful"),I=c(V,"A",{href:!0,rel:!0});var Aa=i(I);oa=o(Aa,"pathfinding tutorial"),Aa.forEach(s),pa=o(V," for a primer. The script is extensively commented, but here are a few notes:"),V.forEach(s),O=u(a),h=c(a,"P",{});var L=i(h);la=o(L,"This "),R=c(L,"CODE",{});var Ta=i(R);ca=o(Ta,"enum"),Ta.forEach(s),ia=o(L," defines the types of possible tiles to "),P=c(L,"CODE",{});var La=i(P);ra=o(La,"SquareGrid"),La.forEach(s),ua=o(L,":"),L.forEach(s),z=u(a),E=c(a,"PRE",{class:!0});var Ba=i(E);Ba.forEach(s),B=u(a),w=c(a,"P",{});var J=i(w);ka=o(J,"Note that Floor, Forest and Wall are somewhat arbitrary, but also represent three different types of tiles, which are all handled differently by A*. Floors are Passable, walls are not, and forests are passable with a higher movement cost. You\u2019ll want to customize this to fit your use case. One thing to consider is to create a type like "),F=c(J,"CODE",{});var Ra=i(F);ha=o(Ra,"Occupied"),Ra.forEach(s),ma=o(J,", so you can keep track of tiles that sprites are currently using."),J.forEach(s),U=u(a),b=c(a,"P",{});var K=i(b);fa=o(K,"The "),D=c(K,"CODE",{});var Pa=i(D);da=o(Pa,"DIRS"),Pa.forEach(s),wa=o(K," array is also worth checking out:"),K.forEach(s),j=u(a),S=c(a,"PRE",{class:!0});var Ua=i(S);Ua.forEach(s),W=u(a),y=c(a,"P",{});var Q=i(y);ba=o(Q,"The "),q=c(Q,"CODE",{});var Fa=i(q);ya=o(Fa,"DIRS"),Fa.forEach(s),va=o(Q," array is important in the pathfinding step where we look for a given tile\u2019s neighbors. In Red Blob\u2019s tutorial and implementation, it only looked for neighbors above, below, and next to each tile. That leads to paths along straight lines and prohibits diagonal movement, which feels weird when you see it in action. So I added diagonals to the directions above. I\u2019ve noticed at least one issue this creates, though. If there are two walls that are diagonal to each other, the sprite can pass diagonally through them. I have a few ideas to solve this, but if anyone knows a good solution, please leave a comment."),Q.forEach(s),H=u(a),A=c(a,"P",{});var Da=i(A);ga=o(Da,"For diagonal movement to work well, we also have to make diagonal movement cost a little more than regular movement:"),Da.forEach(s),G=u(a),x=c(a,"PRE",{class:!0});var ja=i(x);ja.forEach(s),N=u(a),T=c(a,"P",{});var qa=i(T);_a=o(qa,"If the heuristic between a and b is 2, the movement is diagonal and its cost should be the cost of the tile multiplied by the square root of 2. Where each of the sides of a floor tile have a length of 1, for exmple, Sqrt(2) is the literal length of the diagonal. And we can apply the same forumla to tiles of higher costs as well."),qa.forEach(s),this.h()},h(){Na(f.src,Ea="/images/ship.gif")||m(f,"src",Ea),m(v,"href","https://gist.github.com/keithcollins/307c3335308fea62db2731265ab44c06"),m(v,"rel","nofollow"),m(_,"href","http://www.redblobgames.com/pathfinding/a-star/implementation.html#csharp"),m(_,"rel","nofollow"),m(I,"href","http://www.redblobgames.com/pathfinding/a-star/introduction.html"),m(I,"rel","nofollow"),m(E,"class","language-csharp"),m(S,"class","language-csharp"),m(x,"class","language-csharp")},m(a,t){p(a,f,t),p(a,C,t),p(a,k,t),n(k,X),n(k,v),n(v,Z),n(k,$),n(k,g),n(g,aa),n(g,_),n(_,sa),n(g,na),n(k,ta),p(a,M,t),p(a,d,t),n(d,ea),n(d,I),n(I,oa),n(d,pa),p(a,O,t),p(a,h,t),n(h,la),n(h,R),n(R,ca),n(h,ia),n(h,P),n(P,ra),n(h,ua),p(a,z,t),p(a,E,t),E.innerHTML=Ma,p(a,B,t),p(a,w,t),n(w,ka),n(w,F),n(F,ha),n(w,ma),p(a,U,t),p(a,b,t),n(b,fa),n(b,D),n(D,da),n(b,wa),p(a,j,t),p(a,S,t),S.innerHTML=Oa,p(a,W,t),p(a,y,t),n(y,ba),n(y,q),n(q,ya),n(y,va),p(a,H,t),p(a,A,t),n(A,ga),p(a,G,t),p(a,x,t),x.innerHTML=za,p(a,N,t),p(a,T,t),n(T,_a)},p:Ia,i:Ia,o:Ia,d(a){a&&s(f),a&&s(C),a&&s(k),a&&s(M),a&&s(d),a&&s(O),a&&s(h),a&&s(z),a&&s(E),a&&s(B),a&&s(w),a&&s(U),a&&s(b),a&&s(j),a&&s(S),a&&s(W),a&&s(y),a&&s(H),a&&s(A),a&&s(G),a&&s(x),a&&s(N),a&&s(T)}}}const Ja={title:"A* pathfinding",slug:"2016-08-18-astar_pathfinding",date:"2016-08-18",type:"post"};class Ka extends Wa{constructor(f){super();Ha(this,f,null,Ya,Ga,{})}}export{Ka as default,Ja as metadata};
